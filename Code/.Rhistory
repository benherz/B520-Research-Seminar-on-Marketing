###################################
simulation <- function(N) {
datasets <- vector("list", length = N)
for (n in 1:N) {
df <- data.frame(row.names = States)
for (state in States) {
df[state,1] <- runif(1, min = min_consumption, max = max_consumption)
for (t in 2:T){
df[state,t] <- runif(1, min = increase_df["min_increase_per_state", state],
max = increase_df["max_increase_per_state", state]) *
df[state, t-1]
}
}
datasets[n] <- df
}
return(datasets)
}
###################################
# Rename columns
colnames(df) <- paste(min(data$Year):max(data$Year))
colnames(df)
# Add row names as column for id
df$State <- rownames(df)
# Melt to long format
df_long <- melt(df, id.vars = "State")
# Rename columns
df_long <- df_long %>%
rename(Year = variable, PacksPerCapita = value)
# Add treatment column
df_long$treated <- 0
# Change variables to correct format
df_long$Year <- as.integer(as.character(df_long$Year))
df_long$treated <- as.integer(df_long$treated)
# Check data structure
head(df_long)
head(california)
str(df_long)
str(california)
# Combine dataframes
#final_df <- rbind(df_long, california) %>% order(df_long$Year)
############################
# Combine the dataframes
combined_df <- rbind(df_long, california)
# Order the dataframe by 'Year'
combined_df <- combined_df[order(combined_df$Year), ]
head(combined_df)
treated_unit <- "California"
dependent_variable <- "PacksPerCapita"
### Plot development of dependent variable over time for each observation
synth_plot <- ggplot(filter(combined_df, State != treated_unit), aes(x = Year, y = PacksPerCapita, color = State)) +
geom_line() +
# Add California separately to highlight line
geom_vline(xintercept = 1989, linetype = "dashed", size = 1.5) +
#geom_text(data = NULL, aes(x = 1988, y = 500, label = "Proposition 99", color = "black"), angle = 90, vjust = 1, size = 4) +
geom_line(data = filter(combined_df, State == treated_unit), size = 2) +
labs(title = "Development of PacksPerCapita over Time in simulated dataset",
x = "Year",
y = "Packs Per Capita") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 20),  # Adjust title font size
axis.title = element_text(size = 16),  # Adjust axis labels font size
axis.text = element_text(size = 14)) +
scale_color_viridis_d()
head(combined_df)
###  Original df
og_plot <- ggplot(filter(dataset, State != treated_unit), aes(x = Year, y = PacksPerCapita, color = State)) +
geom_line() +
# Add California separately to highlight line
geom_vline(xintercept = 1989, linetype = "dashed", size = 1.5) +
#geom_text(data = NULL, aes(x = 1988, y = 500, label = "Proposition 99", color = "black"), angle = 90, vjust = 1, size = 4) +
geom_line(data = filter(dataset, State == treated_unit), size = 2) +
labs(title = "Development of PacksPerCapita over Time in actual dataset",
x = "Year",
y = "Packs Per Capita") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 20),  # Adjust title font size
axis.title = element_text(size = 16),  # Adjust axis labels font size
axis.text = element_text(size = 14)) +
scale_color_viridis_d()
# Display both plots
synth_plot + og_plot
### Plot California vs. equally weighted control group
equal_control <- filter(dataset, State != "California") %>% group_by(Year) %>%
summarise(Control = mean(PacksPerCapita))
equal_control_plot_data <- cbind(equal_control, filter(dataset, State == "California")["PacksPerCapita"]) %>%
rename(California =  PacksPerCapita)
ggplot(data = equal_control_plot_data) +
geom_line(aes(x = Year, y = Control, color = "Control"), size = 1) +  # Assign color label for legend
geom_line(aes(x = Year, y = California, color = "California"), size = 1) +  # Assign color label for legend
geom_vline(xintercept = 1989, linetype = "dashed", size = 1) +
labs(title = "Development of PacksPerCapita in equally weighted control group vs. California",
x = "Year",
y = "Packs Per Capita",
color = "Line") +  # Adjust legend title
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 16),  # Adjust title font size
axis.title = element_text(size = 12),  # Adjust axis labels font size
axis.text = element_text(size = 10))
###################################
# Define estimators to be used
estimators = list(did=did_estimate,
sc=sc_estimate,
sdid=synthdid_estimate)
# Convert from panel data to matrix
setup = panel.matrices(combined_df)
head(setup)
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
head(estimates)
setup = panel.matrices(dataset)
head(setup)
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
# Load in data and get variables of interest
dataset <- read.csv2("Data/california_prop99.csv")
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
head(estimates)
library(synthdid)
library(rngtools)
library(future)
library(doFuture)
library(future.batchtools)
library(xtable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(patchwork)
#rm(list=ls())
# Set values for data simulation
N <- 20
T <- 15
n_treated <- 5
treatment_period <- 10
# Set values for distribution of initial draws
mean <- 0
sd <- 1
########## Simulation functions ##########
### Function for stagnant dependent variable
stagnant_simulation <- function(N, T, mean = 0, sd = 1, n_treated = 1, treatment_period) {
# Set up dataframe with N rows and T columns
df <- data.frame(matrix(ncol = T, nrow = N))
# Set up separate dataframe for treated units
treated <- data.frame(matrix(ncol = T, nrow = n_treated))
# Name dfs correctly
colnames(df) <- paste(1:T)
rownames(df) <- paste("Observation", 1:N, sep = "")
colnames(treated) <- paste(1:T)
rownames(treated) <- paste("Treated", 1:n_treated, sep = "")
# Draw N random draws as starting points
df[,1] <- rnorm(N, mean, sd)
treated[,1] <- rnorm(n_treated, mean, sd)
##### Fill rest of columns with starting values without any change #####
for (i in 2:T) {
df[,i] <- df[,i-1]
treated[,i] <- treated[,i-1]
}
##### Code in between is where most difference lies #####
# Combine dfs
df <- rbind(df, treated)
# Pivot to long format
df <- df %>% mutate(Observation = rownames(df)) %>% melt(id.vars = "Observation") %>%
rename(Time = variable)  %>% arrange(Time)
df$Time <- as.integer(df$Time)
# Add treatment indicator period
df$treated <- ifelse(df$Observation %in% rownames(treated) & as.numeric(df$Time) >= treatment_period, 1, 0)
df$treated <- as.integer(df$treated)
return(df)
}
### Function with mean zero innovations at each time point
noise_simulation <- function(N, T, mean = 0, sd = 1, n_treated, treatment_period) {
# Set up dataframe with N rows and T columns
df <- data.frame(matrix(ncol = T, nrow = N))
# Set up separate dataframe for treated units
treated <- data.frame(matrix(ncol = T, nrow = n_treated))
# Name dfs correctly
colnames(df) <- paste(1:T)
rownames(df) <- paste("Observation", 1:N, sep = "")
colnames(treated) <- paste(1:T)
rownames(treated) <- paste("Treated", 1:n_treated, sep = "")
# Draw N random draws as starting points
df[,1] <- rnorm(N, mean, sd)
treated[,1] <- rnorm(n_treated, mean, sd)
# Fill rest of columns as previous value + random draw
for (i in 2:T) {
df[,i] <- df[,i-1] + rnorm(N, mean, sd)
treated[,i] <- treated[,i-1] + rnorm(n_treated, mean, sd)
}
# Combine dfs
df <- rbind(df, treated)
# Pivot to long format
df <- df %>% mutate(Observation = rownames(df)) %>% melt(id.vars = "Observation") %>%
rename(Time = variable)  %>% arrange(Time)
df$Time <- as.integer(df$Time)
# Add treatment indicator period
df$treated <- ifelse(df$Observation %in% rownames(treated) & as.numeric(df$Time) >= treatment_period, 1, 0)
df$treated <- as.integer(df$treated)
return(df)
}
# Test-wise simulation
df_stagnant <- stagnant_simulation(N,T, mean, sd, n_treated, treatment_period)
df_noise <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
plot_grouped(df_noise)
library(synthdid)
library(rngtools)
library(future)
library(doFuture)
library(future.batchtools)
library(xtable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(patchwork)
#rm(list=ls())
# Set values for data simulation
N <- 20
T <- 15
n_treated <- 5
treatment_period <- 10
# Set values for distribution of initial draws
mean <- 0
sd <- 1
########## Simulation functions ##########
### Function for stagnant dependent variable
stagnant_simulation <- function(N, T, mean = 0, sd = 1, n_treated = 1, treatment_period) {
# Set up dataframe with N rows and T columns
df <- data.frame(matrix(ncol = T, nrow = N))
# Set up separate dataframe for treated units
treated <- data.frame(matrix(ncol = T, nrow = n_treated))
# Name dfs correctly
colnames(df) <- paste(1:T)
rownames(df) <- paste("Observation", 1:N, sep = "")
colnames(treated) <- paste(1:T)
rownames(treated) <- paste("Treated", 1:n_treated, sep = "")
# Draw N random draws as starting points
df[,1] <- rnorm(N, mean, sd)
treated[,1] <- rnorm(n_treated, mean, sd)
##### Fill rest of columns with starting values without any change #####
for (i in 2:T) {
df[,i] <- df[,i-1]
treated[,i] <- treated[,i-1]
}
##### Code in between is where most difference lies #####
# Combine dfs
df <- rbind(df, treated)
# Pivot to long format
df <- df %>% mutate(Observation = rownames(df)) %>% melt(id.vars = "Observation") %>%
rename(Time = variable)  %>% arrange(Time)
df$Time <- as.integer(df$Time)
# Add treatment indicator period
df$treated <- ifelse(df$Observation %in% rownames(treated) & as.numeric(df$Time) >= treatment_period, 1, 0)
df$treated <- as.integer(df$treated)
return(df)
}
### Function with mean zero innovations at each time point
noise_simulation <- function(N, T, mean = 0, sd = 1, n_treated, treatment_period) {
# Set up dataframe with N rows and T columns
df <- data.frame(matrix(ncol = T, nrow = N))
# Set up separate dataframe for treated units
treated <- data.frame(matrix(ncol = T, nrow = n_treated))
# Name dfs correctly
colnames(df) <- paste(1:T)
rownames(df) <- paste("Observation", 1:N, sep = "")
colnames(treated) <- paste(1:T)
rownames(treated) <- paste("Treated", 1:n_treated, sep = "")
# Draw N random draws as starting points
df[,1] <- rnorm(N, mean, sd)
treated[,1] <- rnorm(n_treated, mean, sd)
# Fill rest of columns as previous value + random draw
for (i in 2:T) {
df[,i] <- df[,i-1] + rnorm(N, mean, sd)
treated[,i] <- treated[,i-1] + rnorm(n_treated, mean, sd)
}
# Combine dfs
df <- rbind(df, treated)
# Pivot to long format
df <- df %>% mutate(Observation = rownames(df)) %>% melt(id.vars = "Observation") %>%
rename(Time = variable)  %>% arrange(Time)
df$Time <- as.integer(df$Time)
# Add treatment indicator period
df$treated <- ifelse(df$Observation %in% rownames(treated) & as.numeric(df$Time) >= treatment_period, 1, 0)
df$treated <- as.integer(df$treated)
return(df)
}
# Test-wise simulation
df_stagnant <- stagnant_simulation(N,T, mean, sd, n_treated, treatment_period)
df_noise <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
##########Plotting functions ##########
### All individual observations over time
plot_individual <- function(df) {
# Subset treated units
treated_units <- df %>% filter(grepl("Treated", Observation))
# Subset control units
control_units <- df %>% filter(!grepl("Treated", Observation))
# Plot them separately to highlight treated observations
ggplot() +
geom_line(data = treated_units, aes(x = Time, y = value, color = Observation), size = 3) +
geom_line(data = control_units, aes(x = Time, y = value, color = Observation), size = 1) +
geom_vline(xintercept = treatment_period, linetype = "dashed", size = 1.5) +
labs(title = "Development of simulated data over time",
x = "Year",
y = "Dependent variable") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) #+
#scale_color_manual(values = c("Treated" = "red", "Control" = "black"))
}
plot_individual(df_noise)
### Means of treated and control group over time
plot_grouped <- function(df) {
# Compute mean of treated units
treated_means <- df %>% filter(grepl("Treated", Observation)) %>%
group_by(Time) %>% summarize(treated_avg = mean(value))
# Compute mean of control group
control_means <- df %>% filter(!grepl("Treated", Observation)) %>%
group_by(Time) %>% summarize(control_avg = mean(value))
# Combine the two dfs
average_data <- merge(treated_means, control_means)
ggplot(data = average_data) +
geom_line(aes(x = Time, y = control_avg, color = "Control mean"), size = 1) +
geom_line(aes(x = Time, y = treated_avg, color = "Treated mean"), size = 1) +
geom_vline(xintercept = treatment_period, linetype = "dashed", size = 1.5) +
labs(title = "Development of means over time",
x = "Year",
y = "Dependent variable") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
scale_color_manual(values = c("Treated mean" = "red", "Control mean" = "black"))
}
###############################################
# Define estimators to be used
dataset <- read.csv2("Data/california_prop99.csv")
estimators = list(did=did_estimate,
sc=sc_estimate,
sdid=synthdid_estimate)
# Convert from panel data to matrix
setup_og = panel.matrices(dataset)
setup_2 = panel.matrices(df_stagnant)
setup_3 = panel.matrices(df_noise)
head(setup_og)
head(setup_2)
head(setup_3)
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup_og$Y,
setup_og$N0, setup_og$T0) } )
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup_2$Y,
setup_2$N0, setup_2$T0) } )
# Compute estimates
estimates = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates)
estimates2 = lapply(estimators, function(estimator) { estimator(setup_2$Y,
setup_2$N0, setup_2$T0) } )
# Compute estimates
estimates_og = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates)
head(estimates_og)
head(estimates_og)
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates_og)
head(estimates2)
head(estimates3)
# Compute estimates
estimates_og = lapply(estimators, function(estimator) { estimator(setup_og$Y,
setup_og$N0, setup_og$T0) } )
# Define estimators to be used
dataset <- read.csv2("Data/california_prop99.csv")
dataset$PacksPerCapita <- as.numeric(dataset$PacksPerCapita)
estimators = list(did=did_estimate,
sc=sc_estimate,
sdid=synthdid_estimate)
# Convert from panel data to matrix
setup_og = panel.matrices(dataset)
setup_2 = panel.matrices(df_stagnant)
setup_3 = panel.matrices(df_noise)
head(setup_og)
head(setup_2)
head(setup_3)
# Compute estimates
estimates_og = lapply(estimators, function(estimator) { estimator(setup_og$Y,
setup_og$N0, setup_og$T0) } )
estimates2 = lapply(estimators, function(estimator) { estimator(setup_2$Y,
setup_2$N0, setup_2$T0) } )
# Compute estimates
estimates_og = lapply(estimators, function(estimator) { estimator(setup_og$Y,
setup_og$N0, setup_og$T0) } )
estimates2 = lapply(estimators, function(estimator) { estimator(setup_2$Y,
setup_2$N0, setup_2$T0) } )
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates_og)
head(estimates2)
head(estimates3)
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates3)
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates3)
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
head(estimates3)
estimates3[0]
estimates3
unlist(estimates3)
estimates3_list <- list()
for (i in 1:100) {
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
setup = panel.matrices(df)
estimates3[[i]] = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
}
View(estimates3)
for (i in 1:10) {
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
setup = panel.matrices(df)
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
estimates3[i] = unlist(estimates)
}
estimates3 = lapply(estimators, function(estimator) { estimator(setup_3$Y,
setup_3$N0, setup_3$T0) } )
unlist(estimates3)
unlist(estimates3)["did"]
iterations = 10
estimates3 = data.frame(matrix(ncol = 3, nrow = iterations))
for (i in 1:iterations) {
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
setup = panel.matrices(df)
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
estimates3[i, "did"] = unlist(estimates)["did"]
estimates3[i, "sc"] = unlist(estimates)["sc"]
estimates3[i, "sdid"] = unlist(estimates)["sdid"]
}
rm(estimates3)
iterations = 10
estimates3 = data.frame(matrix(ncol = 3, nrow = iterations))
for (i in 1:iterations) {
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
setup = panel.matrices(df)
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
estimates3[i, "did"] = unlist(estimates)["did"]
estimates3[i, "sc"] = unlist(estimates)["sc"]
estimates3[i, "sdid"] = unlist(estimates)["sdid"]
}
rm(estimates3)
iterations = 10
estimates3 = data.frame(matrix(ncol = 3, nrow = iterations))
for (i in 1:iterations) {
# Simulate a dataframe
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
# Conduct estimation
setup = panel.matrices(df)
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
# Store estimates
estimates3[i, 1] = unlist(estimates)["did"]
estimates3[i, 2] = unlist(estimates)["sc"]
estimates3[i, 3] = unlist(estimates)["sdid"]
# Rename columns
colnames(estimates3) <- c("did", "sc", "sdid")
}
View(estimates3)
# First actual application
iterations = 1000
estimates3 = data.frame(matrix(ncol = 3, nrow = iterations))
for (i in 1:iterations) {
# Simulate a dataframe
df <- noise_simulation(N,T, mean, sd, n_treated, treatment_period)
# Conduct estimation
setup = panel.matrices(df)
estimates = lapply(estimators, function(estimator) { estimator(setup$Y,
setup$N0, setup$T0) } )
# Store estimates
estimates3[i, 1] = unlist(estimates)["did"]
estimates3[i, 2] = unlist(estimates)["sc"]
estimates3[i, 3] = unlist(estimates)["sdid"]
# Rename columns
colnames(estimates3) <- c("did", "sc", "sdid")
}
# Plot distribution of estimates
estimates3 <- melt(estimates3)
ggplot(data = estimates3) +
geom_density(aes(x = value, color = variable)) +
labs(title = "Distribution of estimates for different estimators",
x = "Estimate",
y = "Density") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
scale_color_manual(values = c("did" = "red", "sc" = "blue", "sdid" = "green"))
